package entities;

import model.exceptions.DomainException;

//public abstract class Account {

public class Account{
	
	private Integer number;
	private String holder;
	protected Double balance;
	private Double withdrawLimit;

	public Account() {
	}

	public Account(Integer number, String holder, Double balance) {
		this.number = number;
		this.holder = holder;
		this.balance = balance;
	}
	
	public Account(Integer number, String holder, Double balance, Double withdrawLimit) {
		super();
		this.number = number;
		this.holder = holder;
		this.balance = balance;
		this.withdrawLimit = withdrawLimit;
	}

	public Integer getNumber() {
		return number;
	}

	public void setNumber(Integer number) {
		this.number = number;
	}

	public String getHolder() {
		return holder;
	}

	public void setHolder(String holder) {
		this.holder = holder;
	}

	public Double getBalance() {
		return balance;
	}

	public Double getWithdrawLimit() {
		return withdrawLimit;
	}

	public void setWithdrawLimit(Double withdrawLimit) {
		this.withdrawLimit = withdrawLimit;
	}

	public void withdraw(double amount) {
		if(withdrawLimit <= amount) {
			throw new DomainException("Withdraw error: The amount exceeds withdraw limit");
		}
		
		balance -= amount + 5.0;
	}

	public void deposit(double amount) {
		balance += amount;
	}
	
	@Override
	public String toString() {
		return "New balence: "+balance;
	}
}
